/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * MyApp API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { BodyType, ErrorType } from '.././custom-instance';
import type {
  ArticlesApiReviewGetReviewsParams,
  CreateReviewDetails,
  Message,
  PaginatedReviewResponse,
  ReviewEditSchema,
  ReviewResponseSchema,
} from '.././schemas';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Get Reviews
 */
export const articlesApiReviewGetReviews = (
  articleId: number,
  params?: ArticlesApiReviewGetReviewsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<PaginatedReviewResponse>(
    { url: `/api/articles/articles/${articleId}/reviews/`, method: 'GET', params, signal },
    options
  );
};

export const getArticlesApiReviewGetReviewsQueryKey = (
  articleId: number,
  params?: ArticlesApiReviewGetReviewsParams
) => {
  return [`/api/articles/articles/${articleId}/reviews/`, ...(params ? [params] : [])] as const;
};

export const getArticlesApiReviewGetReviewsQueryOptions = <
  TData = Awaited<ReturnType<typeof articlesApiReviewGetReviews>>,
  TError = ErrorType<Message>,
>(
  articleId: number,
  params?: ArticlesApiReviewGetReviewsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof articlesApiReviewGetReviews>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getArticlesApiReviewGetReviewsQueryKey(articleId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof articlesApiReviewGetReviews>>> = ({
    signal,
  }) => articlesApiReviewGetReviews(articleId, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!articleId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof articlesApiReviewGetReviews>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ArticlesApiReviewGetReviewsQueryResult = NonNullable<
  Awaited<ReturnType<typeof articlesApiReviewGetReviews>>
>;
export type ArticlesApiReviewGetReviewsQueryError = ErrorType<Message>;

/**
 * @summary Get Reviews
 */
export const useArticlesApiReviewGetReviews = <
  TData = Awaited<ReturnType<typeof articlesApiReviewGetReviews>>,
  TError = ErrorType<Message>,
>(
  articleId: number,
  params?: ArticlesApiReviewGetReviewsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof articlesApiReviewGetReviews>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getArticlesApiReviewGetReviewsQueryOptions(articleId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create Review
 */
export const articlesApiReviewCreateReview = (
  createReviewDetails: BodyType<CreateReviewDetails>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<ReviewResponseSchema>(
    {
      url: `/api/articles/reviews/`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createReviewDetails,
    },
    options
  );
};

export const getArticlesApiReviewCreateReviewMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiReviewCreateReview>>,
    TError,
    { data: BodyType<CreateReviewDetails> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof articlesApiReviewCreateReview>>,
  TError,
  { data: BodyType<CreateReviewDetails> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articlesApiReviewCreateReview>>,
    { data: BodyType<CreateReviewDetails> }
  > = (props) => {
    const { data } = props ?? {};

    return articlesApiReviewCreateReview(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ArticlesApiReviewCreateReviewMutationResult = NonNullable<
  Awaited<ReturnType<typeof articlesApiReviewCreateReview>>
>;
export type ArticlesApiReviewCreateReviewMutationBody = BodyType<CreateReviewDetails>;
export type ArticlesApiReviewCreateReviewMutationError = ErrorType<Message>;

/**
 * @summary Create Review
 */
export const useArticlesApiReviewCreateReview = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiReviewCreateReview>>,
    TError,
    { data: BodyType<CreateReviewDetails> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof articlesApiReviewCreateReview>>,
  TError,
  { data: BodyType<CreateReviewDetails> },
  TContext
> => {
  const mutationOptions = getArticlesApiReviewCreateReviewMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Edit Review
 */
export const articlesApiReviewEditReview = (
  reviewId: number,
  reviewEditSchema: BodyType<ReviewEditSchema>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<ReviewResponseSchema>(
    {
      url: `/api/articles/reviews/${reviewId}/`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: reviewEditSchema,
    },
    options
  );
};

export const getArticlesApiReviewEditReviewMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiReviewEditReview>>,
    TError,
    { reviewId: number; data: BodyType<ReviewEditSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof articlesApiReviewEditReview>>,
  TError,
  { reviewId: number; data: BodyType<ReviewEditSchema> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articlesApiReviewEditReview>>,
    { reviewId: number; data: BodyType<ReviewEditSchema> }
  > = (props) => {
    const { reviewId, data } = props ?? {};

    return articlesApiReviewEditReview(reviewId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ArticlesApiReviewEditReviewMutationResult = NonNullable<
  Awaited<ReturnType<typeof articlesApiReviewEditReview>>
>;
export type ArticlesApiReviewEditReviewMutationBody = BodyType<ReviewEditSchema>;
export type ArticlesApiReviewEditReviewMutationError = ErrorType<Message>;

/**
 * @summary Edit Review
 */
export const useArticlesApiReviewEditReview = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiReviewEditReview>>,
    TError,
    { reviewId: number; data: BodyType<ReviewEditSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof articlesApiReviewEditReview>>,
  TError,
  { reviewId: number; data: BodyType<ReviewEditSchema> },
  TContext
> => {
  const mutationOptions = getArticlesApiReviewEditReviewMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete Review
 */
export const articlesApiReviewDeleteReview = (
  reviewId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Message>(
    { url: `/api/articles/reviews/${reviewId}/`, method: 'DELETE' },
    options
  );
};

export const getArticlesApiReviewDeleteReviewMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiReviewDeleteReview>>,
    TError,
    { reviewId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof articlesApiReviewDeleteReview>>,
  TError,
  { reviewId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articlesApiReviewDeleteReview>>,
    { reviewId: number }
  > = (props) => {
    const { reviewId } = props ?? {};

    return articlesApiReviewDeleteReview(reviewId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ArticlesApiReviewDeleteReviewMutationResult = NonNullable<
  Awaited<ReturnType<typeof articlesApiReviewDeleteReview>>
>;

export type ArticlesApiReviewDeleteReviewMutationError = ErrorType<Message>;

/**
 * @summary Delete Review
 */
export const useArticlesApiReviewDeleteReview = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articlesApiReviewDeleteReview>>,
    TError,
    { reviewId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof articlesApiReviewDeleteReview>>,
  TError,
  { reviewId: number },
  TContext
> => {
  const mutationOptions = getArticlesApiReviewDeleteReviewMutationOptions(options);

  return useMutation(mutationOptions);
};
