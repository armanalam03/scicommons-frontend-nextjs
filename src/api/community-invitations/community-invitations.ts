/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * MyApp API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { BodyType, ErrorType } from '.././custom-instance';
import type {
  CommunityInvitationDetails,
  InvitationDetails,
  InvitationResponseRequest,
  InvitePayload,
  Message,
  SendInvitationsPayload,
} from '.././schemas';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Invite Registered Users
 */
export const communitiesApiInvitationInviteRegisteredUsers = (
  communityId: number,
  invitePayload: BodyType<InvitePayload>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Message>(
    {
      url: `/api/communities/communities/${communityId}/invite-users`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: invitePayload,
    },
    options
  );
};

export const getCommunitiesApiInvitationInviteRegisteredUsersMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiInvitationInviteRegisteredUsers>>,
    TError,
    { communityId: number; data: BodyType<InvitePayload> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesApiInvitationInviteRegisteredUsers>>,
  TError,
  { communityId: number; data: BodyType<InvitePayload> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesApiInvitationInviteRegisteredUsers>>,
    { communityId: number; data: BodyType<InvitePayload> }
  > = (props) => {
    const { communityId, data } = props ?? {};

    return communitiesApiInvitationInviteRegisteredUsers(communityId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesApiInvitationInviteRegisteredUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiInvitationInviteRegisteredUsers>>
>;
export type CommunitiesApiInvitationInviteRegisteredUsersMutationBody = BodyType<InvitePayload>;
export type CommunitiesApiInvitationInviteRegisteredUsersMutationError = ErrorType<Message>;

/**
 * @summary Invite Registered Users
 */
export const useCommunitiesApiInvitationInviteRegisteredUsers = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiInvitationInviteRegisteredUsers>>,
    TError,
    { communityId: number; data: BodyType<InvitePayload> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesApiInvitationInviteRegisteredUsers>>,
  TError,
  { communityId: number; data: BodyType<InvitePayload> },
  TContext
> => {
  const mutationOptions = getCommunitiesApiInvitationInviteRegisteredUsersMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Respond To Invitation
 */
export const communitiesApiInvitationRespondToInvitation = (
  invitationId: number,
  invitationResponseRequest: BodyType<InvitationResponseRequest>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Message>(
    {
      url: `/api/communities/invitations/${invitationId}/respond`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: invitationResponseRequest,
    },
    options
  );
};

export const getCommunitiesApiInvitationRespondToInvitationMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiInvitationRespondToInvitation>>,
    TError,
    { invitationId: number; data: BodyType<InvitationResponseRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesApiInvitationRespondToInvitation>>,
  TError,
  { invitationId: number; data: BodyType<InvitationResponseRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesApiInvitationRespondToInvitation>>,
    { invitationId: number; data: BodyType<InvitationResponseRequest> }
  > = (props) => {
    const { invitationId, data } = props ?? {};

    return communitiesApiInvitationRespondToInvitation(invitationId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesApiInvitationRespondToInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiInvitationRespondToInvitation>>
>;
export type CommunitiesApiInvitationRespondToInvitationMutationBody =
  BodyType<InvitationResponseRequest>;
export type CommunitiesApiInvitationRespondToInvitationMutationError = ErrorType<Message>;

/**
 * @summary Respond To Invitation
 */
export const useCommunitiesApiInvitationRespondToInvitation = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiInvitationRespondToInvitation>>,
    TError,
    { invitationId: number; data: BodyType<InvitationResponseRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesApiInvitationRespondToInvitation>>,
  TError,
  { invitationId: number; data: BodyType<InvitationResponseRequest> },
  TContext
> => {
  const mutationOptions = getCommunitiesApiInvitationRespondToInvitationMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Send Invitations To Unregistered Users
 */
export const communitiesApiInvitationSendInvitationsToUnregisteredUsers = (
  communityId: number,
  sendInvitationsPayload: BodyType<SendInvitationsPayload>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Message>(
    {
      url: `/api/communities/communities/${communityId}/send-invitations`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: sendInvitationsPayload,
    },
    options
  );
};

export const getCommunitiesApiInvitationSendInvitationsToUnregisteredUsersMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiInvitationSendInvitationsToUnregisteredUsers>>,
    TError,
    { communityId: number; data: BodyType<SendInvitationsPayload> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesApiInvitationSendInvitationsToUnregisteredUsers>>,
  TError,
  { communityId: number; data: BodyType<SendInvitationsPayload> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesApiInvitationSendInvitationsToUnregisteredUsers>>,
    { communityId: number; data: BodyType<SendInvitationsPayload> }
  > = (props) => {
    const { communityId, data } = props ?? {};

    return communitiesApiInvitationSendInvitationsToUnregisteredUsers(
      communityId,
      data,
      requestOptions
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesApiInvitationSendInvitationsToUnregisteredUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiInvitationSendInvitationsToUnregisteredUsers>>
>;
export type CommunitiesApiInvitationSendInvitationsToUnregisteredUsersMutationBody =
  BodyType<SendInvitationsPayload>;
export type CommunitiesApiInvitationSendInvitationsToUnregisteredUsersMutationError =
  ErrorType<Message>;

/**
 * @summary Send Invitations To Unregistered Users
 */
export const useCommunitiesApiInvitationSendInvitationsToUnregisteredUsers = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiInvitationSendInvitationsToUnregisteredUsers>>,
    TError,
    { communityId: number; data: BodyType<SendInvitationsPayload> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesApiInvitationSendInvitationsToUnregisteredUsers>>,
  TError,
  { communityId: number; data: BodyType<SendInvitationsPayload> },
  TContext
> => {
  const mutationOptions =
    getCommunitiesApiInvitationSendInvitationsToUnregisteredUsersMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Respond To Email Invitation
 */
export const communitiesApiInvitationRespondToEmailInvitation = (
  token: string,
  invitationResponseRequest: BodyType<InvitationResponseRequest>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Message>(
    {
      url: `/api/communities/invitations/respond/${token}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: invitationResponseRequest,
    },
    options
  );
};

export const getCommunitiesApiInvitationRespondToEmailInvitationMutationOptions = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiInvitationRespondToEmailInvitation>>,
    TError,
    { token: string; data: BodyType<InvitationResponseRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof communitiesApiInvitationRespondToEmailInvitation>>,
  TError,
  { token: string; data: BodyType<InvitationResponseRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof communitiesApiInvitationRespondToEmailInvitation>>,
    { token: string; data: BodyType<InvitationResponseRequest> }
  > = (props) => {
    const { token, data } = props ?? {};

    return communitiesApiInvitationRespondToEmailInvitation(token, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CommunitiesApiInvitationRespondToEmailInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiInvitationRespondToEmailInvitation>>
>;
export type CommunitiesApiInvitationRespondToEmailInvitationMutationBody =
  BodyType<InvitationResponseRequest>;
export type CommunitiesApiInvitationRespondToEmailInvitationMutationError = ErrorType<Message>;

/**
 * @summary Respond To Email Invitation
 */
export const useCommunitiesApiInvitationRespondToEmailInvitation = <
  TError = ErrorType<Message>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof communitiesApiInvitationRespondToEmailInvitation>>,
    TError,
    { token: string; data: BodyType<InvitationResponseRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof communitiesApiInvitationRespondToEmailInvitation>>,
  TError,
  { token: string; data: BodyType<InvitationResponseRequest> },
  TContext
> => {
  const mutationOptions =
    getCommunitiesApiInvitationRespondToEmailInvitationMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get Community Invitations
 */
export const communitiesApiInvitationGetCommunityInvitations = (
  communityId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<InvitationDetails[]>(
    { url: `/api/communities/${communityId}/invitations`, method: 'GET', signal },
    options
  );
};

export const getCommunitiesApiInvitationGetCommunityInvitationsQueryKey = (communityId: number) => {
  return [`/api/communities/${communityId}/invitations`] as const;
};

export const getCommunitiesApiInvitationGetCommunityInvitationsQueryOptions = <
  TData = Awaited<ReturnType<typeof communitiesApiInvitationGetCommunityInvitations>>,
  TError = ErrorType<Message>,
>(
  communityId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesApiInvitationGetCommunityInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCommunitiesApiInvitationGetCommunityInvitationsQueryKey(communityId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof communitiesApiInvitationGetCommunityInvitations>>
  > = ({ signal }) =>
    communitiesApiInvitationGetCommunityInvitations(communityId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!communityId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof communitiesApiInvitationGetCommunityInvitations>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CommunitiesApiInvitationGetCommunityInvitationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiInvitationGetCommunityInvitations>>
>;
export type CommunitiesApiInvitationGetCommunityInvitationsQueryError = ErrorType<Message>;

/**
 * @summary Get Community Invitations
 */
export const useCommunitiesApiInvitationGetCommunityInvitations = <
  TData = Awaited<ReturnType<typeof communitiesApiInvitationGetCommunityInvitations>>,
  TError = ErrorType<Message>,
>(
  communityId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesApiInvitationGetCommunityInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCommunitiesApiInvitationGetCommunityInvitationsQueryOptions(
    communityId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Community Invitation Details
 */
export const communitiesApiInvitationGetCommunityInvitationDetails = (
  communityId: number,
  invitationId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<CommunityInvitationDetails>(
    {
      url: `/api/communities/${communityId}/invitation-details/${invitationId}`,
      method: 'GET',
      signal,
    },
    options
  );
};

export const getCommunitiesApiInvitationGetCommunityInvitationDetailsQueryKey = (
  communityId: number,
  invitationId: number
) => {
  return [`/api/communities/${communityId}/invitation-details/${invitationId}`] as const;
};

export const getCommunitiesApiInvitationGetCommunityInvitationDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof communitiesApiInvitationGetCommunityInvitationDetails>>,
  TError = ErrorType<Message>,
>(
  communityId: number,
  invitationId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesApiInvitationGetCommunityInvitationDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCommunitiesApiInvitationGetCommunityInvitationDetailsQueryKey(communityId, invitationId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof communitiesApiInvitationGetCommunityInvitationDetails>>
  > = ({ signal }) =>
    communitiesApiInvitationGetCommunityInvitationDetails(
      communityId,
      invitationId,
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(communityId && invitationId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof communitiesApiInvitationGetCommunityInvitationDetails>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CommunitiesApiInvitationGetCommunityInvitationDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof communitiesApiInvitationGetCommunityInvitationDetails>>
>;
export type CommunitiesApiInvitationGetCommunityInvitationDetailsQueryError = ErrorType<Message>;

/**
 * @summary Get Community Invitation Details
 */
export const useCommunitiesApiInvitationGetCommunityInvitationDetails = <
  TData = Awaited<ReturnType<typeof communitiesApiInvitationGetCommunityInvitationDetails>>,
  TError = ErrorType<Message>,
>(
  communityId: number,
  invitationId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof communitiesApiInvitationGetCommunityInvitationDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCommunitiesApiInvitationGetCommunityInvitationDetailsQueryOptions(
    communityId,
    invitationId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
