/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * MyApp API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customInstance } from '.././custom-instance';
import type { BodyType, ErrorType } from '.././custom-instance';
import type {
  EmailSchema,
  LogInSchemaIn,
  LogInSchemaOut,
  SignUpSchemaIn,
  StatusMessageSchema,
  UsersApiAuthResetPasswordParams,
} from '.././schemas';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary Signup
 */
export const usersApiAuthSignup = (
  signUpSchemaIn: BodyType<SignUpSchemaIn>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<StatusMessageSchema>(
    {
      url: `/api/users/signup`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: signUpSchemaIn,
    },
    options
  );
};

export const getUsersApiAuthSignupMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthSignup>>,
    TError,
    { data: BodyType<SignUpSchemaIn> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiAuthSignup>>,
  TError,
  { data: BodyType<SignUpSchemaIn> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiAuthSignup>>,
    { data: BodyType<SignUpSchemaIn> }
  > = (props) => {
    const { data } = props ?? {};

    return usersApiAuthSignup(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersApiAuthSignupMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiAuthSignup>>
>;
export type UsersApiAuthSignupMutationBody = BodyType<SignUpSchemaIn>;
export type UsersApiAuthSignupMutationError = ErrorType<unknown>;

/**
 * @summary Signup
 */
export const useUsersApiAuthSignup = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthSignup>>,
    TError,
    { data: BodyType<SignUpSchemaIn> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersApiAuthSignup>>,
  TError,
  { data: BodyType<SignUpSchemaIn> },
  TContext
> => {
  const mutationOptions = getUsersApiAuthSignupMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Activate
 */
export const usersApiAuthActivate = (
  token: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<StatusMessageSchema>(
    { url: `/api/users/activate/${token}`, method: 'GET', signal },
    options
  );
};

export const getUsersApiAuthActivateQueryKey = (token: string) => {
  return [`/api/users/activate/${token}`] as const;
};

export const getUsersApiAuthActivateQueryOptions = <
  TData = Awaited<ReturnType<typeof usersApiAuthActivate>>,
  TError = ErrorType<unknown>,
>(
  token: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersApiAuthActivate>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersApiAuthActivateQueryKey(token);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersApiAuthActivate>>> = ({ signal }) =>
    usersApiAuthActivate(token, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!token, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof usersApiAuthActivate>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UsersApiAuthActivateQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersApiAuthActivate>>
>;
export type UsersApiAuthActivateQueryError = ErrorType<unknown>;

/**
 * @summary Activate
 */
export const useUsersApiAuthActivate = <
  TData = Awaited<ReturnType<typeof usersApiAuthActivate>>,
  TError = ErrorType<unknown>,
>(
  token: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof usersApiAuthActivate>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUsersApiAuthActivateQueryOptions(token, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Resend Activation
 */
export const usersApiAuthResendActivation = (
  emailSchema: BodyType<EmailSchema>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<StatusMessageSchema>(
    {
      url: `/api/users/resend-activation`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: emailSchema,
    },
    options
  );
};

export const getUsersApiAuthResendActivationMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthResendActivation>>,
    TError,
    { data: BodyType<EmailSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiAuthResendActivation>>,
  TError,
  { data: BodyType<EmailSchema> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiAuthResendActivation>>,
    { data: BodyType<EmailSchema> }
  > = (props) => {
    const { data } = props ?? {};

    return usersApiAuthResendActivation(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersApiAuthResendActivationMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiAuthResendActivation>>
>;
export type UsersApiAuthResendActivationMutationBody = BodyType<EmailSchema>;
export type UsersApiAuthResendActivationMutationError = ErrorType<unknown>;

/**
 * @summary Resend Activation
 */
export const useUsersApiAuthResendActivation = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthResendActivation>>,
    TError,
    { data: BodyType<EmailSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersApiAuthResendActivation>>,
  TError,
  { data: BodyType<EmailSchema> },
  TContext
> => {
  const mutationOptions = getUsersApiAuthResendActivationMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Login User
 */
export const usersApiAuthLoginUser = (
  logInSchemaIn: BodyType<LogInSchemaIn>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<LogInSchemaOut>(
    {
      url: `/api/users/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: logInSchemaIn,
    },
    options
  );
};

export const getUsersApiAuthLoginUserMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthLoginUser>>,
    TError,
    { data: BodyType<LogInSchemaIn> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiAuthLoginUser>>,
  TError,
  { data: BodyType<LogInSchemaIn> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiAuthLoginUser>>,
    { data: BodyType<LogInSchemaIn> }
  > = (props) => {
    const { data } = props ?? {};

    return usersApiAuthLoginUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersApiAuthLoginUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiAuthLoginUser>>
>;
export type UsersApiAuthLoginUserMutationBody = BodyType<LogInSchemaIn>;
export type UsersApiAuthLoginUserMutationError = ErrorType<unknown>;

/**
 * @summary Login User
 */
export const useUsersApiAuthLoginUser = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthLoginUser>>,
    TError,
    { data: BodyType<LogInSchemaIn> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersApiAuthLoginUser>>,
  TError,
  { data: BodyType<LogInSchemaIn> },
  TContext
> => {
  const mutationOptions = getUsersApiAuthLoginUserMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Request Reset
 */
export const usersApiAuthRequestReset = (
  emailSchema: BodyType<EmailSchema>,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<StatusMessageSchema>(
    {
      url: `/api/users/forgot-password`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: emailSchema,
    },
    options
  );
};

export const getUsersApiAuthRequestResetMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthRequestReset>>,
    TError,
    { data: BodyType<EmailSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiAuthRequestReset>>,
  TError,
  { data: BodyType<EmailSchema> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiAuthRequestReset>>,
    { data: BodyType<EmailSchema> }
  > = (props) => {
    const { data } = props ?? {};

    return usersApiAuthRequestReset(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersApiAuthRequestResetMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiAuthRequestReset>>
>;
export type UsersApiAuthRequestResetMutationBody = BodyType<EmailSchema>;
export type UsersApiAuthRequestResetMutationError = ErrorType<unknown>;

/**
 * @summary Request Reset
 */
export const useUsersApiAuthRequestReset = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthRequestReset>>,
    TError,
    { data: BodyType<EmailSchema> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersApiAuthRequestReset>>,
  TError,
  { data: BodyType<EmailSchema> },
  TContext
> => {
  const mutationOptions = getUsersApiAuthRequestResetMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Reset Password
 */
export const usersApiAuthResetPassword = (
  params: UsersApiAuthResetPasswordParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/api/users/reset-password`, method: 'POST', params },
    options
  );
};

export const getUsersApiAuthResetPasswordMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthResetPassword>>,
    TError,
    { params: UsersApiAuthResetPasswordParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof usersApiAuthResetPassword>>,
  TError,
  { params: UsersApiAuthResetPasswordParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof usersApiAuthResetPassword>>,
    { params: UsersApiAuthResetPasswordParams }
  > = (props) => {
    const { params } = props ?? {};

    return usersApiAuthResetPassword(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UsersApiAuthResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof usersApiAuthResetPassword>>
>;

export type UsersApiAuthResetPasswordMutationError = ErrorType<unknown>;

/**
 * @summary Reset Password
 */
export const useUsersApiAuthResetPassword = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof usersApiAuthResetPassword>>,
    TError,
    { params: UsersApiAuthResetPasswordParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof usersApiAuthResetPassword>>,
  TError,
  { params: UsersApiAuthResetPasswordParams },
  TContext
> => {
  const mutationOptions = getUsersApiAuthResetPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
